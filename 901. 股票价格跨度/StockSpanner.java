import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class StockSpanner {

    public Stack<int[]> r;

    public StockSpanner() {
        this.r = new Stack<>();
    }
//    栈中每个元素保存着股票价格跟对应的跨度，原理是比当前元素小的元素的跨度可复用，重叠的子问题不需要重新算
    public int next(int price) {
        int[] newP = new int[]{price, 1};
        if (!this.r.isEmpty()) {
            while (this.r.peek()[0] <= price) {
                int[] temp = this.r.pop();
                newP[1] += temp[1];
//                System.out.println("haha");
                if (this.r.isEmpty())
                    break;
            }
        }
        this.r.add(newP);
        return newP[1];
    }

    public static void main(String[] args) {
        StockSpanner s = new StockSpanner();
        int[] t = new int[]{1,1,4,4,5,6,6,8,9,11,11,14,14,15,15,16,20,21,22,22,22,26,26,28,28,28,29,32,33,34,36,37,37,39,40,41,41,42,44,46,47,47,47,48,49,49,49,59,61,61,62,62,62,62,63,64,65,65,66,66,67,68,68,68,70,70,71,71,72,73,73,73,74,76,76,76,77,77,78,78,79,79,79,79,79,79,79,80,80,82,83,83,87,88,89,89,90,91,91,93,93,94,94,95,95,95,97,97,98,99,100,100,101,102,104,108,109,110,110,110,111,111,112,113,114,114,114,116,117,117,117,118,118,118,120,120,123,123,123,125,125,127,129,130,131,131,132,133,133,135,136,140,141,141,144,145,145,146,147,148,150,152,153,153,153,154,154,157,157,158,158,159,159,161,161,162,163,165,167,169,170,172,173,174,176,176,177,177,178,179,182,184,184,185,185,185,186,187,188,189,189,190,192,192,193,194,194,195,198,199,201,202,208,208,209,214,214,214,214,215,217,218,222,222,223,224,224,224,226,226,227,227,229,229,230,230,231,232,232,233,236,238,238,239,239,239,240,241,244,244,244,246,247,252,256,257,260,261,262,263,264,265,266,266,267,267,268,268,269,270,272,272,274,274,275,275,276,277,277,280,280,280,280,281,281,281,282,283,283,284,284,284,284,285,286,286,287,288};
        for (int i = 0; i < t.length; i++) {
            System.out.println("--------------------------------");
            s.next(t[i]);
        }
    }
}
